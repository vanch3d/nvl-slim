{% extends 'site.twig' %}




{% block urltile %}Publication Graph{% endblock %}
{% block pagetile %}Publications{% endblock %}

{% block breadcrumb %}
    <ol class="breadcrumb">
        <li><a title="Home" href="{{ path_for('home') }}">Home</a></li>
        <li><a title="Publications" href="{{ path_for('publications.all') }}">Publications</a></li>
        <li class="active">Graph</li>
    </ol>
{% endblock %}

{% block injectCSS %}
    <style>

        .node {
            stroke: #fff;
            stroke-width: 1.5px;
        }

        .link {
            stroke: #999;
            stroke-opacity: .6;
        }

    </style>
{% endblock %}

{% block content %}
    <section class="white-section">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <div class="map"></div>
                </div>
            </div>
        </div>
    </section>
{% endblock %}

{% block injectJS %}
    <script src="//cdn.jsdelivr.net/d3js/3.4.3/d3.js"></script>
    <script type="text/javascript">
        $(document).ready(function()
        {
            $('html').click(function(){
               console.log("DFDFDFDF");
            });

            var width = $(".map").width(),
                aspect = 500 / 950;

            var color = d3.scale.category20();


            var svg = d3.select(".map").append("svg")
                    .attr("preserveAspectRatio", "xMinYMid")
                    .attr("viewBox", "0 0 500 500")
                    .attr("width", 700)
                    .attr("height", 500);

            d3.json("{{ path_for('api.publications')}}", function(error, data) {
                var graph = {
                    'nodes' : [],
                    'links' : []
                        },
                authors = [],
                authors2 = [];

                var prev = null;
                var first=null;
                $.each( data, function( key, value ) {
                    graph.nodes.push(value);
                    $.each( value.author, function( idx, author ) {
                        var idx = $.inArray(author.family, authors);
                        if (idx==-1)
                        {
                            idx = authors.push(author.family);
                            idx--;
                            authors2.push({
                                'title': author.family,
                                'author': true,
                                'project': {
                                    'id': (author.family=="Van Labeke") ? 0 : value.project.id

                                }
                            });
                        }
                        graph.links.push({
                            'source': value,
                            'target': authors2[idx],
                            'value': 1
                        });
                    });
                    /*if (prev)
                    {
                        graph.links.push({
                            'source': prev,
                            'target': value,
                            'value': 1
                        });
                    }
                    prev = value;
                    if (first===null)
                    {
                        first=value;
                    }*/
                });
                if (first && prev)
                {
                    graph.links.push({
                        'source': prev,
                        'target': first,
                        'value': 1
                    });
                }
                graph.nodes = $.merge(graph.nodes, authors2);

                var groups = d3.nest()
                        .key(function(d) { return d.project.id; })
                        .entries(graph.nodes.filter(function(d) {
                            return d.author !== true;
                            })
                        );
                var groupPath = function(d) {
                    return "M" +
                            d3.geom.hull(d.values.map(function(i) { return [i.x, i.y]; }))
                                    .join("L")
                            + "Z";
                };
                var groupFill = function(d, i) {
                    return color(d.values[0].project.id);
                };

                var force = d3.layout.force()
                        .charge(-150)
                        .linkDistance(120)
                        .size([700,500])
                        .nodes(graph.nodes)
                        .links(graph.links)
                        .start();

                var link = svg.selectAll(".link")
                        .data(graph.links)
                        .enter().append("line")
                        .attr("class", "link")
                        .style("stroke-width", function(d) { return Math.sqrt(d.value); });

                var node = svg.selectAll(".node")
                        .data(graph.nodes)
                        .enter().append("svg:g")
                        .attr('tabindex',0)
                        .attr('style','cursor: pointer;')
                        .attr("class", function (d) {
                            if (d.author === true) {
                                return "author node";
                            } else {
                                return "pub node";
                            }
                        })
                        .on("click", function(a,b,c){
                                console.log(a,b,c);
                            })
                        .each(axisPopover)
                        .call(force.drag);


                d3.selectAll(".pub").append("rect")
                        .attr("width", 16)
                        .attr("height", 16)
                        .attr("transform", "translate(-8,-8)")

                        .style("fill", function(d) {
                            return color(d.project.id); });

                d3.selectAll(".author").append("circle")
                        .style("fill", function(d) {
                            return color(d.project.id); })
                        .attr("r", 8);

                node.append("title")
                        .text(function(d) { return d.title; });

                function axisPopover(d,i)
                {

                    $(this).popover({
                        title:"Sentence" ,
                        container:"body",
                        trigger: 'click',
                        html : true,
                        content: function()
                        {
                            return "DFDFDFDF";
                        }
                    });
                    $(this).on('show.bs.popover', function (e) {
                        console.log(e);
                        $(".node").not(this).popover('hide');
                    })
                }



                force.on("tick", function() {
                    link.attr("x1", function(d) { return d.source.x; })
                            .attr("y1", function(d) { return d.source.y; })
                            .attr("x2", function(d) { return d.target.x; })
                            .attr("y2", function(d) { return d.target.y; });


                    node.attr("transform", function (d) {
                        return "translate(" + d.x + "," + d.y + ")";});

                    svg.selectAll("path")
                            .data(groups)
                            .attr("d", groupPath)
                            .enter().insert("path", ".node")
                            .style("fill", groupFill)
                            .style("stroke", groupFill)
                            .style("stroke-width", 40)
                            .style("stroke-linejoin", "round")
                            .style("opacity", .2)
                            .attr("d", groupPath)
                            .append("title")
                                .text(function(d) {
                                    return d.key;
                            });
                });




            });
            $(window).resize(function() {
                var width = $(".map").width();
                svg.attr("width", width);
                svg.attr("height", 500);
            });
        });
    </script>
{% endblock %}