{% extends 'site.twig' %}

{% block injectJS %}
<script src="//cdn.jsdelivr.net/d3js/3.4.3/d3.min.js"></script>
<script src="/plugins/d3js/d3.layout.cloud.js"></script>
<script>
    var resizeEventsTrigger = (function () {
        function triggerResizeStart($el) {
            $el.trigger('resizestart');
            isStart = !isStart;
        }

        function triggerResizeEnd($el) {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(function () {
                $el.trigger('resizeend');
                isStart = !isStart;
            }, delay);
        }

        var isStart = true;
        var delay = 200;
        var timeoutId;

        return function ($el) {
            isStart ? triggerResizeStart($el) : triggerResizeEnd($el);
        };

    })();

    $(document).ready(function() {
        var tags = {{ data|json_encode|raw }};

        var fill = d3.scale.category20b();
        var $container = $('#d3-container');

        var h = $container.height(),
            w= $container.width();


        var max,
            fontSize;

        var layout = d3.layout.cloud()
            .timeInterval(Infinity)
            .size([w, h])
            .fontSize(function(d) {
                return fontSize(+d.value);
            })
            .text(function(d) {
                return d.key;
            })
            .on("end", draw);

        var svg = d3.select("#d3-container").append("svg")
            .attr("width", w)
            .attr("height", h);

        var vis = svg.append("g").attr("transform", "translate(" + [w >> 1, h >> 1] + ")");

        $container.on('resizestart', function () {
            console.log('resize start');
        });
        $container.on('resizeend', function () {
            console.log('resize end');
            update();
        });

        window.onresize = function () {
            resizeEventsTrigger( $container );
        };


        update();

        function draw(data, bounds) {
            console.log(bounds);
            //var w = window.innerWidth,
            //    h = window.innerHeight;
            var h = $container.height(),
                w= $container.width();

            svg.attr("width", w).attr("height", h);

            var scale = bounds ? Math.min(
                w / Math.abs(bounds[1].x - w / 2),
                w / Math.abs(bounds[0].x - w / 2),
                h / Math.abs(bounds[1].y - h / 2),
                h / Math.abs(bounds[0].y - h / 2)) / 2 : 1;

            var text = vis.selectAll("text")
                .data(data, function(d) {
                    return d.text.toLowerCase();
                });
            text.transition()
                .duration(1000)
                .attr("transform", function(d) {
                    return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                })
                .style("font-size", function(d) {
                    return d.size + "px";
                });
            text.enter().append("text")
                .attr("text-anchor", "middle")
                .attr("transform", function(d) {
                    return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                })
                .style("font-size", function(d) {
                    return d.size + "px";
                })
                .style("opacity", 1e-6)
                .transition()
                .duration(1000)
                .style("opacity", 1);
            text.style("font-family", function(d) {
                return d.font;
            })
                .style("fill", function(d) {
                    return fill(d.text.toLowerCase());
                })
                .text(function(d) {
                    return d.text;
                });

            vis.transition().attr("transform", "translate(" + [w >> 1, h >> 1] + ")scale(" + scale + ")");
        }

        function update() {
            layout.font('impact').spiral('archimedean');
            fontSize = d3.scale['sqrt']().range([10, 100]);
            if (tags.length){
                fontSize.domain([+tags[tags.length - 1].value || 1, +tags[0].value]);
            }
            layout.stop().words(tags).start();
        }
    });

    {#
    $(document).ready(function()
    {
        var gg = {{ data|json_encode|raw }};
        console.log(gg);


        var fill = d3.scale.category20();
        var width = $("#d3-container").width(),
                aspect = 500 / 950;
        var svg= null;

        d3.layout.cloud().size([950, 500])
                .words(gg)
                .padding(5)
                .rotate(function() { return ~~(Math.random() * 2) * 90; })
                .font("Impact")
                .fontSize(function(d) { return d.size+10; })
                .on("end", draw)
                .start();

        function draw(words) {
           svg = d3.select("#d3-container").append("svg")
                    .attr("preserveAspectRatio", "xMidYMid")
                    .attr("viewBox", "0 0 950 500")
                    .attr("width", width)
                    .attr("height", width * aspect)
                    .append("g")
                    .attr("transform", "translate(" + [width >> 1, (width*aspect) >> 1] + ")")
                    .selectAll("text")
                    .data(words)
                    .enter().append("text")
                    .style("font-size", function(d) { return d.size + "px"; })
                    .style("font-family", "Impact")
                    .style("fill", function(d, i) { return fill(i); })
                    .attr("text-anchor", "middle")
                    .attr("transform", function(d) {
                        return "translate(" + [d.x, d.y] + ")rotate(" + d.rotate + ")";
                    })
                    .text(function(d) { return d.text; });

        }

        $(window).resize(function() {
            var width = $("#d3-container").width();
            if (svg) svg.attr("width", width);
            if (svg) svg.attr("height", width * aspect);
        });

    });
    #}

    </script>
{%  endblock %}
{% block content %}
    <section class="white-section">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <div class="text-widget">
                        <div class="text-widget-title">
                            <h3>Project Overview</h3>
                        </div>

                        <div>{{ text | join(' ! ') }}</div>
                        <div class="row gray-section" id="d3-container" style="padding: 5px; height: 350px;">
                        </div>

                    </div>
                </div>
            </div>
        </div>
     </section>

{%  endblock %}