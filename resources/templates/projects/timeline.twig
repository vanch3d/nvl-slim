{% extends 'site.twig' %}

{% block urltile %}Research Projects (Timeline){% endblock %}
{% block pagetile %}Research Projects{% endblock %}

{% block breadcrumb %}
    <ol class="breadcrumb">
        <li><a title="Home" href="{{ path_for('home') }}">Home</a></li>
        <li><a title="Home" href="{{ path_for('project.all') }}">Projects</a></li>
        <li class="active">Timeline</li>
    </ol>
{% endblock %}

{% block pagedescription %}
    <h2>Research Projects - Timeline</h2>

{% endblock %}


{% block content %}
    <section class="section">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-12">
                    <div id="timelinediv" style="width: 100%; height: 680px;">
                    </div>
                </div>
            </div>
        </div>
    </section>


{% endblock %}

{% block injectCSS %}
    <style>
    </style>
{% endblock %}

{% block injectJS %}
<script type="text/javascript" src="/js/d3.nvl-bundle.min.js"></script>
<script type="text/javascript" src="/js/timeline.min.js"></script>
<script type="text/javascript">
    $(document).ready(function (src) {

        // data stub for the timeline
        var tl_json = {
            events : [] ,
            title: {
                text: { headline: "Research Activities"}
            },
            eras: []
        };

        // Wrangle the different sources of data (projects, publications, github, images)
        // @todo[vanch3d] tried d3.queue to get all requests in one pass, but not working. Try $.when ?
        var q = d3.queue();
        q.defer(function(c) {
            $.getJSON("{{ path_for('api.projects') }}").done(function (src) { c(null,src.data);})
        });
        q.defer(function(c) {
                $.getJSON("{{ path_for('api.publications') }}").done(function (src) { c(null,src.data);})
            });

        // wait for both request to finish
        q.await(function(error,projects,publications) {
            if (error) throw error;
            //console.log(projects,publications);

            // computing eras from projects
            var currentEra = {
                start_date: { year: null },
                end_date: { year: "1995" },
                text: { headline: null, text: null}
            };

            // initialing second queue for other conditional requests
            q = d3.queue();
            $.each( projects.reverse(), function( index, project){

                // add the project
                var event = {
                    start_date: { year: project.start},
                    end_date: { year: project.end, month: 12, day: 31},
                    text: { headline: project.title, text: project.description},
                    group: "projects",
                    media:{
                        url: "/images/project.png",
                        caption: "HELLO",
                        thumbnail: "/images/project.png"
                    },
                    background : {
                        url: null,
                        color: null
                    }
                };
                tl_json.events.push(event);

                // create an era based on project and previous era
                var era = {
                    start_date: currentEra.end_date,
                    end_date: event.end_date,
                    text: { headline: project.location, text: project.institution}
                };

                // check if we are at same location
                if (era.text.headline !== currentEra.text.headline) {
                    if (currentEra.text.headline != null) tl_json.eras.push(currentEra);
                    currentEra = era;
                }
                else
                {
                    currentEra.end_date = event.end_date;
                }

                // extract publications for this project
                projectPub = $.grep(publications,function(pub,idx){
                    return (pub.project.id === project.id);
                });

                // Add the project's publications to the timeline
                $.each( projectPub, function( index, pub ){
                    var event = {
                        start_date: {
                            year: pub.issued["date-parts"][0][0],
                            month: pub.issued["date-parts"][0][1] || null
                        },
                        text: { headline: pub.archive_location, text: pub.abstract || ""},
                        group: "publications"
                    };
                    tl_json.events.push(event);

                });

                // Add the project's GitHub releases to the timeline
                $.each( project.github, function( index, repos){
                    if (repos === "") return;

                    ///var Etag = localStorage.getItem("nvl-slim.github.request." + repos);
                    var headers = {
                    };

                    q.defer(function(c) {
                        $.ajax({
                            dataType: "json",
                            headers: headers,
                            url: "https://api.github.com/repos/" + repos + "/releases"
                        }).done(function (src) { c(null,src);});
                    });
                });
            });
            if (currentEra.text.headline != null) tl_json.eras.push(currentEra);

            // wait for all github requests to finish
            q.awaitAll(function(error,data){
                if (error) throw error;
                //console.log(data);

                // flatten the list
                var allRepos = [];
                $.each( data, function( index, repo ){ $.merge(allRepos,repo); });

                $.each( allRepos, function( index, repo ){
                    var created = new Date(repo.created_at);

                    var event = {
                        start_date: {
                            year: created.getFullYear(),
                            month: created.getMonth()
                        },
                        text: { headline: repo.tag_name, text: repo.body || ""},
                        group: "Source Code"
                    };
                    tl_json.events.push(event);
                });
                //console.log(tl_json);

                // create the timeline
                var timeline = new TL.Timeline('timelinediv',tl_json);
            })
        });
    });
</script>
{% endblock %}
